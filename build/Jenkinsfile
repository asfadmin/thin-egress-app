pipeline {

  // Environment Setup
  environment {
    AWSENV=""
    BUILDTAG="${APPTAG}-${NEWTAG}"
    CODE_ARCHIVE_FILENAME="${APPTAG}-code-${NEWTAG}.zip"
    CF_TEMPLATE_FILENAME="${APPTAG}-cloudformation-${NEWTAG}.yaml"
    TF_ZIP_FILENAME="tea-terraform-${NEWTAG}.zip"
    CODE_BUCKET="asf.rain.code"
    CODE_PUBLIC_BUCKETNAME="asf.public.code"
    CODE_DIR="thin-egress-app"
    STACKNAME_SAME="${APPTAG}-jenk-same"
    STACKNAME_SCND="${APPTAG}-jenk-scnd"
    URS_CREDS_SECRET_NAME="${URS_CREDS_SECRET_NAME}"
    DEPENDENCYLAYERFILENAME="${env.APPTAG}-dependencylayer-${env.NEWTAG}.zip"
    DOCKERREPO="docker-registry.asf.alaska.edu:5000"
    JWTKEYSECRETNAME="${JWTKEYSECRETNAME}"
    JWTALGO="RS256"
    LAMBDA_TIMEOUT=6
    CODE_BUCKET_SUFFIX="""${sh(script:'if [ "${AWS_DEFAULT_REGION}" = "us-west-2" ]; then printf %s ".usw2"; else printf %s ""; fi', returnStdout: true)}"""
  }

  // Build on a slave with docker (for pre-req?)
  agent { label 'docker' }

  stages {

    // just sort of assess the enviroment
    stage('Setup Env') {
      steps {
        // Send chat notification
        mattermostSend channel: "${CHAT_ROOM}", color: '#EAEA5C', endpoint: "${env.CHATHOST}", message: "Build started: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>). See (<{$env.RUN_CHANGES_DISPLAY_URL}|Changes>)."
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]]) {
          // Dump ENV
          sh 'tree'
          sh 'pwd'
          sh 'env'
        }
        // Update submodules.
        sh "echo '>> Updating submodules....'"
        sh "git config user.email 'jenkins@jenkins.asf.alaska.edu'"
        sh "git config user.name 'jenkins'"
        sh "git submodule update --init --recursive"
      }
    }

    // Download and package dependencies
    stage('Package Dependency Layer') {
      steps {
        // Since we can't build a working pycrypto in our Jenkins environment,
        // we'll offload that to a amazonlinux:2 container

        // Create a working space, pull in dependencies
        sh "echo '>> Gathering Dependencies....'"

        sh "cd ${WORKSPACE}"

        // Make sure we get all the requirements:
        sh "cp ${WORKSPACE}/rain-api-core/requirements.txt ${WORKSPACE}/lambda/requirements_rain-api-core.txt"
        sh "cp ${WORKSPACE}/lambda/requirements.txt ${WORKSPACE}/lambda/requirements_tea.txt"
        sh "cp ${WORKSPACE}/build/dependency_builder.sh ${WORKSPACE}/lambda/"

        sh 'docker run --rm -v ${WORKSPACE}/lambda/:/depbuild/in -v ${WORKSPACE}/:/depbuild/out -e "ZIPFILENAME=${DEPENDENCYLAYERFILENAME}" --name "depbuilder.${APPTAG}.${NEWTAG}" amazonlinux:2  bash /depbuild/in/dependency_builder.sh'

        sh 'echo "this file ${WORKSPACE}/${DEPENDENCYLAYERFILENAME}" should exist: '
        sh "ls -lah *.zip"


      }
   }
    // Package code
    stage('Package Code') {
      steps {

        // Zip up the upload.
        sh "echo '>> Building Zipfile....'"

        sh """ cd ${WORKSPACE}/lambda  && \
               sed -i -e "s/<BUILD_ID>/${BUILDTAG}/" ./app.py && \
               zip -g ../${CODE_ARCHIVE_FILENAME} ./app.py && \
               zip -g ../${CODE_ARCHIVE_FILENAME} ./update_lambda.py && \
               zip -g -r ../${CODE_ARCHIVE_FILENAME} ./templates && \
               cd .. && \
               cd rain-api-core  && \
               zip -g -r ../${CODE_ARCHIVE_FILENAME} ./rain_api_core """

        // Swap in BUILD#
        sh "echo '>> Build Stamping....'"

        sh "cd ${WORKSPACE}"

        // thin-egress-app.yaml
        sh 'if [ ${APPTAG} != "tea" ]; then sed -i -e "s/asf.public.code/${CODE_BUCKET}/" ./cloudformation/thin-egress-app.yaml; fi'
        sh 'sed -i -e "s/<CODE_ARCHIVE_PATH_FILENAME>/${CODE_DIR}\\/${CODE_ARCHIVE_FILENAME}/" ./cloudformation/thin-egress-app.yaml'
        sh 'sed -i -e "s/<DEPENDENCY_ARCHIVE_PATH_FILENAME>/${CODE_DIR}\\/${DEPENDENCYLAYERFILENAME}/" ./cloudformation/thin-egress-app.yaml'
        sh 'sed -i -e "s/<BUILD_ID>/${BUILD_ID}/" ./cloudformation/thin-egress-app.yaml'
        sh 'sed -i -e "s;^Description:.*;Description: \\"TEA built by Jenkins job ${JOB_NAME}, ${BUILDTAG}\\";" ./cloudformation/thin-egress-app.yaml'

        // Zip up terraform
        sh "echo '>> Building Terraform Zip....'"
        sh "cp ${WORKSPACE}/${CODE_ARCHIVE_FILENAME} ${WORKSPACE}/terraform/lambda.zip"
        sh "cp ${WORKSPACE}/${DEPENDENCYLAYERFILENAME} ${WORKSPACE}/terraform/dependencylayer.zip"
        sh "cp ./cloudformation/thin-egress-app.yaml ${WORKSPACE}/terraform/thin-egress-app.yaml"
        sh "cd ${WORKSPACE}/terraform && zip ../${TF_ZIP_FILENAME} *.tf thin-egress-app.yaml lambda.zip dependencylayer.zip"
      }
   }
   // Push packages to AWS and deploy new version
   stage('Push to AWS') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]])  {


          // Push the code up to private bucket
          sh "echo '>> Pushing dependencylayer to ASF Bucket'"
          sh "aws s3 cp ${WORKSPACE}/${DEPENDENCYLAYERFILENAME} s3://${CODE_BUCKET}${CODE_BUCKET_SUFFIX}/${CODE_DIR}/${DEPENDENCYLAYERFILENAME}"
          sh "echo '>> Pushing code to ASF Bucket'"
          sh "aws s3 cp ./${CODE_ARCHIVE_FILENAME} s3://${CODE_BUCKET}${CODE_BUCKET_SUFFIX}/${CODE_DIR}/"
          sh "aws s3 cp ./cloudformation/thin-egress-app.yaml s3://${CODE_BUCKET}${CODE_BUCKET_SUFFIX}/${CODE_DIR}/${CF_TEMPLATE_FILENAME}"


          // Clarify in description that this stack is deployed by Jenkins,
          sh 'cp ./cloudformation/thin-egress-app.yaml ./cloudformation/thin-egress-app-deployed.yaml'
          sh 'sed -i -e "s;^Description:.*;Description: \\"TEA built and deployed by Jenkins job ${JOB_NAME}, currently at ${BUILDTAG}\\";" ./cloudformation/thin-egress-app-deployed.yaml'
          // Push out the CF Stack
          sh "echo '>> Deploying the CF stack'"
          sh """ aws cloudformation deploy --region=${AWS_DEFAULT_REGION} \
                     --stack-name ${STACKNAME_SAME} \
                     --template-file cloudformation/thin-egress-app-deployed.yaml \
                     --capabilities CAPABILITY_NAMED_IAM \
                     --parameter-overrides \
                       URSAuthCredsSecretName=${URS_CREDS_SECRET_NAME} \
                       ConfigBucket=${BUCKETNAME_PREFIX}config \
                       PermissionsBoundaryName= \
                       BucketMapFile=bucket_map_customheaders.yaml \
                       PublicBucketsFile="" \
                       PrivateBucketsFile="" \
                       BucketnamePrefix=${BUCKETNAME_PREFIX} \
                       DownloadRoleArn="" \
                       DownloadRoleInRegionArn="" \
                       HtmlTemplateDir= \
                       StageName=API \
                       Loglevel=DEBUG \
                       Maturity=${MATURITY}\
                       PrivateVPC= \
                       VPCSecurityGroupIDs= \
                       VPCSubnetIDs= \
                       EnableApiGatewayLogToCloudWatch="False" \
                       DomainName=${DOMAIN_NAME-""} \
                       DomainCertArn=${DOMAIN_CERT_ARN-""}  \
                       CookieDomain=${COOKIE_DOMAIN-""} \
                       LambdaCodeS3Key=${CODE_DIR}/${CODE_ARCHIVE_FILENAME} \
                       LambdaCodeDependencyArchive=${CODE_DIR}/${DEPENDENCYLAYERFILENAME} \
                       LambdaCodeS3Bucket=${CODE_BUCKET}${CODE_BUCKET_SUFFIX} \
                       LambdaTimeout=${LAMBDA_TIMEOUT} \
                       JwtAlgo=${JWTALGO} \
                       JwtKeySecretName=${JWTKEYSECRETNAME} \
                       UseReverseBucketMap="False" """

          // This will be the stack for downloading from 2nd account.
          /*sh """ aws cloudformation deploy --region=${AWS_DEFAULT_REGION} \
                     --stack-name ${STACKNAME_SCND} \
                     --template-file cloudformation/thin-egress-app-deployed.yaml \
                     --capabilities CAPABILITY_NAMED_IAM \
                     --parameter-overrides \
                       URSAuthCredsSecretName=${URS_CREDS_SECRET_NAME} \
                       ConfigBucket=rain-t-config \
                       PermissionsBoundaryName= \
                       BucketMapFile=bucket_map_customheaders.yaml \
                       PublicBucketsFile="" \
                       PrivateBucketsFile="" \
                       BucketnamePrefix=${BUCKETNAME_PREFIX_SCND} \
                       DownloadRoleArn=${DOWNLOAD_ROLE_ARN} \
                       DownloadRoleInRegionArn=${DOWNLOAD_ROLE_ARN_INREGION} \
                       HtmlTemplateDir= \
                       StageName=API \
                       Loglevel=DEBUG \
                       Maturity=${env.MATURITY}\
                       PrivateVPC= \
                       VPCSecurityGroupIDs= \
                       VPCSubnetIDs= \
                       EnableApiGatewayLogToCloudWatch="False" \
                       DomainName=${DOMAIN_NAME} \
                       DomainCertArn=${DOMAIN_CERT_ARN}  \
                       CookieDomain=${COOKIE_DOMAIN} \
                       LambdaCodeS3Key=${CODE_DIR}/${CODE_ARCHIVE_FILENAME} \
                       LambdaCodeDependencyArchive=${CODE_DIR}/${DEPENDENCYLAYERFILENAME} \
                       LambdaCodeS3Bucket=${CODE_BUCKET}${CODE_BUCKET_SUFFIX} \
                       LambdaTimeout=${LAMBDA_TIMEOUT} \
                       JwtAlgo=${JWTALGO} \
                       JwtKeySecretName=${JWTKEYSECRETNAME} \
                       UseReverseBucketMap="False" """
          */
        }
      }
    }

    // Run download test script
    stage('Validate AWS Deployment'){
      steps {
        // Load up AWS + URS credentials
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.URS_ACCT}",  usernameVariable: 'URS_USERNAME', passwordVariable: 'URS_PASSWORD']]) {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]])  {
            // Attempt some downloads
            sh("bash ./build/download_test.sh")
          }
        }
      }
    }

    // Tag it in Github
    stage('Tag Build'){
      steps {
        // Use existing creds
        sh("git config user.email 'jenkins@jenkins.asf.alaska.edu'")
        sh("git config user.name 'jenkins'")

        // tags current changeset
        sh "echo '>> Creating Build Tag'"
        sh ("git tag -a ${BUILDTAG} -m \"versioning ${BUILDTAG}\"")

        // pushes the tags
        sh "echo '>> Pushing Build Tag'"
        sh ("git push origin ${BUILDTAG}")
      }
    }

    // If this is PROD, push the code to public
    stage ('Push Public Code') {
      when {
        expression { "${env.APPTAG}" == 'tea' }
      }
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]])  {
          sh "echo '>> Pushing code to Public Code Bucket'"
          sh "aws s3 cp ./${CODE_ARCHIVE_FILENAME} s3://${CODE_PUBLIC_BUCKETNAME}/${CODE_DIR}/ --acl public-read"
          sh "aws s3 cp ./${TF_ZIP_FILENAME} s3://${CODE_PUBLIC_BUCKETNAME}/${CODE_DIR}/ --acl public-read"
          sh "aws s3 cp ${WORKSPACE}/${DEPENDENCYLAYERFILENAME} s3://${CODE_PUBLIC_BUCKETNAME}/${CODE_DIR}/${DEPENDENCYLAYERFILENAME} --acl public-read"
          sh "aws s3 cp ./cloudformation/thin-egress-app.yaml s3://${CODE_PUBLIC_BUCKETNAME}/${CODE_DIR}/${CF_TEMPLATE_FILENAME} --acl public-read"
          sh """ echo '{ "schemaVersion": 1, "label": "Last Release", "message": "'$BUILDTAG'", "color": "success" }'  > /tmp/lastrelease.json"""
          sh """ aws s3 cp --metadata-directive REPLACE --cache-control no-cache \
                           --expires '2016-06-14T00:00:00Z' --content-type 'application/json' \
                           /tmp/lastrelease.json s3://asf.public.code/thin-egress-app/ --acl public-read """
        }
      }
    }
  } // stages

  // Send build status to Mattermost, Update build badge
  post {
    success {
      mattermostSend channel: "${CHAT_ROOM}", color: '#CEEBD3', endpoint: "${env.CHATHOST}", message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
      sh "rm -rf /tmp/buildreport && mkdir -p /tmp/buildreport/"

      sh """ echo '{ "schemaVersion": 1, "label": "Build Status", "message": "Success", "color": "success" }' > /tmp/buildreport/buildstatus.json """
      sh """ echo '{ "schemaVersion": 1, "label": "Last Successful Build", "message": "'$BUILDTAG'", "color": "success" }'  > /tmp/buildreport/lastgoodbuild.json """
      sh """ echo '{ "schemaVersion": 1, "label": "Last Build ", "message": "'$BUILDTAG'", "color": "success" }'  > /tmp/buildreport/lastbuild.json """
      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]])  {
        sh """ aws s3 cp --metadata-directive REPLACE --cache-control no-cache \
                         --expires '2016-06-14T00:00:00Z' --content-type 'application/json' \
                         --recursive /tmp/buildreport/ \
                         s3://asf.public.code/thin-egress-app/ --acl public-read """
      }
    }
    failure {
      sh "rm -rf /tmp/buildreport && mkdir -p /tmp/buildreport/"

      sh """ echo '{ "schemaVersion": 1, "label": "Build Status", "message": "Failed!", "color": "critical" }' > /tmp/buildreport/buildstatus.json """
      sh """ echo '{ "schemaVersion": 1, "label": "Last Build ", "message": "'$BUILDTAG'", "color": "critical" }'  > /tmp/buildreport/lastbuild.json """
      mattermostSend channel: "${CHAT_ROOM}", color: '#FFBDBD', endpoint: "${env.CHATHOST}", message: "Build Failed:  ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]])  {
        sh """ aws s3 cp --metadata-directive REPLACE --cache-control no-cache \
                         --expires '2016-06-14T00:00:00Z' --content-type 'application/json' \
                         --recursive /tmp/buildreport/ \
                         s3://asf.public.code/thin-egress-app/ --acl public-read """
      sh 'tree'
      sh 'printenv'
      }
    }
  }
}
