AWSTemplateFormatVersion: 2010-09-09

Description: "A 'thinner' egress app using lambda."

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      -
        Label:
          default: App Settings
        Parameters:
          - Loglevel
          - Maturity
          - ConfigBucket
          - HtmlTemplateDir
          - StageName
          - EnableApiGatewayLogToCloudWatch
      -
        Label:
          default: Domain Settings
        Parameters:
          - DomainName
          - CookieDomain
          - DomainCertArn
      -
        Label:
          default: Lambda Code
        Parameters:
          - LambdaCodeS3Bucket
          - LambdaCodeS3Key
          - LambdaCodeDependencyArchive
          - LambdaTimeout
      -
        Label:
          default: URS Settings
        Parameters:
          - URSAuthCredsSecretName
          - AuthBaseUrl
      -
        Label:
          default: Data Bucket Setup
        Parameters:
          - BucketnamePrefix
          - BucketMapFile
          - UseReverseBucketMap
          - PublicBucketsFile
          - PrivateBucketsFile
          - DownloadRoleArn
          - DownloadRoleInRegionArn
      -
        Label:
          default: Session Settings
        Parameters:
          - SessionTTL
          - JwtAlgo
          - JwtKeySecretName
      -
        Label:
          default: NGAP Integration
        Parameters:
          - PrivateVPC
          - VPCSecurityGroupIDs
          - VPCSubnetIDs
          - PermissionsBoundaryName

Parameters:
  DomainName:
    Type: String
    Default: ""
    Description: Custom domain name used by redirect_url

  CookieDomain:
    Type: String
    Default: ""
    Description: "The cookies get set to this domain, and any subdomains. (eg '.your.rootdomain.gov')"

  DomainCertArn:
    Type: String
    Default: ""
    Description: "Optional SSL Certificate ARN from Certificate Manager. Not applicable in NGAP behind CloudFront."

  VPCSecurityGroupIDs:
    Type: String
    Default: ""
    Description: "Optional list of security groups for the Lambda function."

  VPCSubnetIDs:
    Type: String
    Default: ""
    Description: "Optional list of Subnets for the Lambda function."

  PrivateVPC:
    Type: String
    Default: ""
    Description: "Optional internal VPC."

  LambdaCodeS3Key:
    Type: String
    Default: "<CODE_ARCHIVE_PATH_FILENAME>"
    Description: "S3 Key of packaged lambda egress code."

  LambdaCodeS3Bucket:
    Type: String
    Default: "asf.public.code"
    Description: "S3 Bucket of packaged lambda egress code."

  LambdaCodeDependencyArchive:
    Type: String
    Default: "<DEPENDENCY_ARCHIVE_PATH_FILENAME>"
    Description: "S3 Key of packaged lambda urs code dependencies."

  LambdaTimeout:
    Type: Number
    Default: 6
    MinValue: 3
    MaxValue: 30
    Description: "Timeout in seconds for lambda."

  JwtKeySecretName:
    Type: String
    AllowedPattern: '[0-9a-zA-Z\.\-\+\/\_\+\=\.\@\-]+'
    Description: 'Name of secret that contains RSA public and private keys for use in encrypting JWT payload. Secret keys should be named "rsa_priv_key" and "rsa_pub_key" and contents should be base64 encoded.'
    ConstraintDescription: 'Secret name must contain only alphanumeric characters and the characters /_+=.@-'

  JwtAlgo:
    Type: String
    Default: 'RS256'
    AllowedValues:
      - 'HS256'
      - 'RS256'
    Description: 'Algorithm used for encoding or encrypting the JWT.'

  URSAuthCredsSecretName:
    Type: String
    AllowedPattern: '[0-9a-zA-Z\.\-\+\/\_\+\=\.\@\-]+'
    Description: "AWS Secrets Manager name of URS creds. Must consist of two rows, names 'UrsId' and 'UrsAuth'."
    ConstraintDescription: 'Secret name must contain only alphanumeric characters and the characters /_+=.@-'

  AuthBaseUrl:
    Type: String
    AllowedValues:
      - 'https://urs.earthdata.nasa.gov'
      - 'https://uat.urs.earthdata.nasa.gov'
    Default: 'https://urs.earthdata.nasa.gov'
    Description: "Is the 'AUTH_BASE_URL' env var in the lambda."

  Loglevel:
    Type: String
    AllowedValues:
      - 'DEBUG'
      - 'INFO'
      - 'WARNING'
      - 'ERROR'
      - 'CRITICAL'
    Default: 'DEBUG'
    Description: "Python loglevel."

  Maturity:
    Type: String
    AllowedValues:
      - 'DEV'
      - 'INT'
      - 'TEST'
      - 'PROD'
    Default: 'DEV'
    Description: "Maturity of deployment."

  BucketnamePrefix:
    Type: String
    Default: 'prfx-d-'
    Description: "All data buckets should have names prefixed with this. Must be compatible with S3 naming conventions (lower case only, etc)."

  SessionTTL:
    Type: Number
    Default: 168
    Description: "Time to live for auth session, in hours. 168 is a week."

  StageName:
    Type: String
    Default: 'API'
    Description: "This value will show up as the 'base' of the url path as so: https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/<StageName>/and/so/on."

  ConfigBucket:
    Type: String
    Default: 'egress-config-bucket'
    Description: 'This is the bucket where config files can be found.'

  HtmlTemplateDir:
    Type: String
    Default: ''
    Description: 'Directory in ConfigBucket where the lambda will look for html templates. Lambda will not look into subdirectories. Please put only html templates in this dir. Leave this field blank to use default templates that are included with the lambda code zip file.'

  BucketMapFile:
    Type: String
    Default: 'bucket_map.yaml'
    Description: "Path and file of bucketmap file's location in the ConfigBucket."

  UseReverseBucketMap:
    Type: String
    Default: "False"
    AllowedValues:
      - "False"
      - "True"
    Description: "Standard bucketmaps are not reverse."

  PublicBucketsFile:
    Type: String
    Default: ''
    Description: "Deprecated, will be removed in a near-future version of TEA. Path and file of public buckets file's location in the ConfigBucket."

  PrivateBucketsFile:
    Type: String
    Default: ''
    Description: "Deprecated, will be removed in a near-future version of TEA. Path and file of private buckets file's location in the ConfigBucket."

  DownloadRoleArn:
    Type: String
    Default: ""
    Description: "ARN for reading of data buckets. Roles for out and in-region will be created if left blank"

  DownloadRoleInRegionArn:
    Type: String
    Default: ""
    Description: "ARN for reading of data buckets when in-region request is made. Must contain value if DownloadRoleArn has a value."

  PermissionsBoundaryName:
    Type: String
    Default: ""
    Description: 'Optional PermissionsBoundary Policy name. In NGAP2, the policy name is "NGAPShRoleBoundary".'

  EnableApiGatewayLogToCloudWatch:
    Type: String
    Default: "False"
    AllowedValues:
      - "False"
      - "True"
    Description: 'Optional flag to enable (True) Api Gateway logging to CloudWatch. If "True", you must add an ARN for a role with write access to CloudWatch Logs in your account here: https://console.aws.amazon.com/apigateway/home?region=[REGION]#/settings'


Conditions:
  DomainNameIsSet: !Not [ !Equals [ !Ref DomainName, "" ] ]
  ApiGatewayLogToCloudWatchIsSet: !Equals [ !Ref EnableApiGatewayLogToCloudWatch, "True" ]
  CreateDownloadRole: !Equals [ !Ref DownloadRoleArn, "" ]
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundaryName, "" ] ]
  UsePrivateVPC: !Not [ !Equals [ !Ref PrivateVPC, "" ] ]
  DomainNotInNgap: !And [ !Condition DomainNameIsSet, !Not [ !Condition UsePrivateVPC ] ]

Outputs:
  ExternalEndpoint:
    Value:
      !If
        - DomainNameIsSet
        - !Sub "https://${DomainName}/"
        - !Sub "https://${EgressApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EgressStage}/"
  URSredirectURI:
    Value:
      !If
        - DomainNameIsSet
        - !Sub "https://${DomainName}/login"
        - !Sub "https://${EgressApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EgressStage}/login"
  ApiEndpoint:
    Value: !Sub "https://${EgressApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EgressStage}/"
  RestApiId:
    Value: !Ref EgressApiGateway
  RestApiRootResourceId:
    Value: !GetAtt EgressApiGateway.RootResourceId
  ApiGatewayLogGroupEgress:
    Value: !Ref ApiGatewayCloudWatchLogGroupEgress
    Condition: ApiGatewayLogToCloudWatchIsSet

Resources:

  DownloadRoleInRegion:
    Type: AWS::IAM::Role
    Condition: CreateDownloadRole
    Properties:
      RoleName: !Sub "${AWS::StackName}-DownloadRoleInRegion"
      PermissionsBoundary:
        !If
        - UsePermissionsBoundary
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundaryName}"
        - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Effect: Allow
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-IamPolicyDownload"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${BucketnamePrefix}*/*"
                  - !Sub "arn:aws:s3:::${BucketnamePrefix}*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region

  DownloadRoleLocal:
    Type: AWS::IAM::Role
    Condition: CreateDownloadRole
    Properties:
      RoleName: !Sub "${AWS::StackName}-DownloadRoleLocal"
      PermissionsBoundary:
        !If
        - UsePermissionsBoundary
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundaryName}"
        - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Effect: Allow
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-IamPolicyDownload"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${BucketnamePrefix}*/*"
                  - !Sub "arn:aws:s3:::${BucketnamePrefix}*"

  EgressLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-EgressLambdaIamRole"
      PermissionsBoundary:
        !If
          - UsePermissionsBoundary
          - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundaryName}"
          - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service:
              - lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-IamPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - secretsmanager:GetSecretValue
                Resource: '*' # Is this S3?
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ConfigBucket}/*"
                  - !Sub "arn:aws:s3:::${ConfigBucket}"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  UpdatePolicyLambdaIamRole:
    Type: AWS::IAM::Role
    Condition: CreateDownloadRole
    Properties:
      RoleName: !Sub "${AWS::StackName}-UpdatePolicyLambdaIamRole"
      PermissionsBoundary:
        !If
        - UsePermissionsBoundary
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundaryName}"
        - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service:
              - lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-UpdateLambdaIamPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PutRolePolicy'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:ListRolePolicies'
                Resource: !GetAtt DownloadRoleInRegion.Arn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  UpdatePolicyLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - EgressLambdaDependencyLayer
    Condition: CreateDownloadRole
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Role: !GetAtt UpdatePolicyLambdaIamRole.Arn
      FunctionName: !Sub "${AWS::StackName}-UpdatePolicyLambda"
      VpcConfig:
        !If
        - UsePrivateVPC
        - SecurityGroupIds:
            !Split [ ',', !Ref VPCSecurityGroupIDs ]
          SubnetIds:
            !Split [ ',', !Ref VPCSubnetIDs ]
        - !Ref "AWS::NoValue"
      Environment:
        Variables:
          iam_role_name: !Ref DownloadRoleInRegion
          policy_name: !Sub "${AWS::StackName}-IamPolicyDownload"
          prefix: !Sub "${BucketnamePrefix}"
      Timeout: !Ref LambdaTimeout
      Handler: update_lambda.lambda_handler
      Runtime: 'python3.7'
      Layers:
        - !Ref EgressLambdaDependencyLayer
      #MemorySize: 128

  RegionUpdateSnsSubscription:
      Type: 'AWS::SNS::Subscription'
      Condition: CreateDownloadRole
      Properties:
        TopicArn: !Sub 'arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged'
        Endpoint: !GetAtt UpdatePolicyLambda.Arn
        Protocol: lambda
        Region: !Sub 'us-east-1'


  EgressLambdaDependencyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
      - python3.6
      - python3.7
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeDependencyArchive
        #S3ObjectVersion : String
      Description: !Sub "Layer with python dependencies for the ${AWS::StackName} stack."
      LayerName: !Sub "${AWS::StackName}-dependencies"
      #LicenseInfo: String

  EgressLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - EgressLambdaDependencyLayer
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Role: !GetAtt EgressLambdaIamRole.Arn
      FunctionName: !Sub "${AWS::StackName}-EgressLambda"
      VpcConfig:
        !If
        - UsePrivateVPC
        - SecurityGroupIds:
            !Split [ ',', !Ref VPCSecurityGroupIDs ]
          SubnetIds:
            !Split [ ',', !Ref VPCSubnetIDs ]
        - !Ref "AWS::NoValue"
      Environment:
        Variables:
          DOMAIN_NAME:
            !If
              - DomainNameIsSet
              - !Ref DomainName
              - !Ref AWS::NoValue
          COOKIE_DOMAIN: !Ref CookieDomain
          URS_CREDS_SECRET_NAME: !Ref URSAuthCredsSecretName
          AUTH_BASE_URL: !Ref AuthBaseUrl
          LOGLEVEL: !Ref Loglevel
          BUILD_VERSION: "<BUILD_ID>"
          MATURITY: !Ref Maturity
          S3_SIGNATURE_VERSION: 's3v4'
          BUCKETNAME_PREFIX: !Ref BucketnamePrefix
          SESSION_TTL_HRS: !Ref SessionTTL
          STAGE_NAME: !Ref StageName
          CONFIG_BUCKET: !Ref ConfigBucket
          BUCKET_MAP_FILE: !Ref BucketMapFile
          USE_REVERSE_BUCKET_MAP: !Ref UseReverseBucketMap
          PUBLIC_BUCKETS_FILE: !Ref PublicBucketsFile
          PRIVATE_BUCKETS_FILE: !Ref PrivateBucketsFile
          EGRESS_APP_DOWNLOAD_ROLE_ARN: !If [ CreateDownloadRole, !GetAtt DownloadRoleLocal.Arn, !Ref DownloadRoleArn ]
          EGRESS_APP_DOWNLOAD_ROLE_INREGION_ARN: !If [ CreateDownloadRole, !GetAtt DownloadRoleInRegion.Arn, !Ref DownloadRoleInRegionArn ]
          HTML_TEMPLATE_DIR: !Ref HtmlTemplateDir
          JWT_KEY_SECRET_NAME: !Ref JwtKeySecretName
          JWT_ALGO: !Ref JwtAlgo
      Timeout: !Ref LambdaTimeout
      Handler: app.app
      Runtime: 'python3.7'
      Layers:
        - !Ref EgressLambdaDependencyLayer
      #MemorySize: 128

  ExtDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: DomainNotInNgap
    DependsOn:
      - EgressApiGateway
    Properties:
      CertificateArn: !Ref DomainCertArn # Not NGAP using cert.
      DomainName: !Ref DomainName

  ExtDomainBasePathMap:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: DomainNotInNgap
    DependsOn:
      - ExtDomainName
    Properties:
      BasePath: ''
      DomainName: !Ref DomainName
      RestApiId: !Ref EgressApiGateway
      Stage: !Ref StageName

  EgressApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-EgressGateway"
      EndpointConfiguration:
        !If
        - UsePrivateVPC
        - Types:
            - 'PRIVATE'
        - !Ref "AWS::NoValue"
      Policy:
        !If
        - UsePrivateVPC
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action: "*"
              Resource: "*"
              Condition:
                StringEquals:
                  aws:SourceVpc: !Ref PrivateVPC
        - !Ref "AWS::NoValue"

  EgressApiResourceLogin:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - EgressApiGateway
    Properties:
      ParentId: !GetAtt EgressApiGateway.RootResourceId
      PathPart: 'login'
      RestApiId: !Ref EgressApiGateway

  EgressApiResourceLogout:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - EgressApiGateway
    Properties:
      ParentId: !GetAtt EgressApiGateway.RootResourceId
      PathPart: 'logout'
      RestApiId: !Ref EgressApiGateway

  EgressApiResourceDynamicUrl:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - EgressApiGateway
    Properties:
      ParentId: !GetAtt EgressApiGateway.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref EgressApiGateway

  EgressApiResourceProfile:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - EgressApiGateway
    Properties:
      ParentId: !GetAtt EgressApiGateway.RootResourceId
      PathPart: 'profile'
      RestApiId: !Ref EgressApiGateway

  EgressApiResourceLocate:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - EgressApiGateway
    Properties:
      ParentId: !GetAtt EgressApiGateway.RootResourceId
      PathPart: 'locate'
      RestApiId: !Ref EgressApiGateway

  EgressApiResourceVersion:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - EgressApiGateway
    Properties:
      ParentId: !GetAtt EgressApiGateway.RootResourceId
      PathPart: 'version'
      RestApiId: !Ref EgressApiGateway

  EgressAPIMethodLocate:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 404
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      MethodResponses:
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
          StatusCode: 200
      OperationName: 'locate method'
      RequestParameters:
        'method.request.header.Cookie': true
      ResourceId: !Ref EgressApiResourceLocate
      RestApiId: !Ref EgressApiGateway

  EgressAPIrootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 404
            # etc
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      MethodResponses: #TODO: this, probably
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
          StatusCode: 200
      OperationName: 'root method'
      RequestParameters:
        'method.request.header.Cookie': true
      ResourceId: !GetAtt EgressApiGateway.RootResourceId
      RestApiId: !Ref EgressApiGateway

  EgressAPIMethodLogout:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 404
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      MethodResponses: #TODO: this, probably
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
          StatusCode: 200
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
          StatusCode: 301
      OperationName: 'root method'
      RequestParameters:
        'method.request.header.Cookie': true
      ResourceId: !Ref EgressApiResourceLogout
      RestApiId: !Ref EgressApiGateway

  EgressAPIMethodLogin:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 404
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      MethodResponses: #TODO: this, probably
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
          StatusCode: 200
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
            'method.response.header.Location': true
          StatusCode: 301
      OperationName: 'login method'
      RequestParameters:
        'method.request.header.Cookie': true
      ResourceId: !Ref EgressApiResourceLogin
      RestApiId: !Ref EgressApiGateway

  EgressAPIMethodDynamicUrl:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'ANY'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 404
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      MethodResponses: #TODO: this, probably
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
            'method.response.header.Content-Length': true
            'method.response.header.Content-Type': true
            'method.response.header.Accept-Ranges': true
            'method.response.header.ETag': true
            'method.response.header.Last-Modified': true
            'method.response.header.Date': true
          StatusCode: 200
        # TODO: cull the following appropriately
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
            'method.response.header.Content-Length': true
            'method.response.header.Content-Type': true
            'method.response.header.Accept-Ranges': true
            'method.response.header.ETag': true
            'method.response.header.Last-Modified': true
            'method.response.header.Date': true
            'method.response.header.Location': true
          StatusCode: 301
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
            'method.response.header.Content-Length': true
            'method.response.header.Content-Type': true
            'method.response.header.Accept-Ranges': true
            'method.response.header.ETag': true
            'method.response.header.Last-Modified': true
            'method.response.header.Date': true
            'method.response.header.Location': true
          StatusCode: 303
      OperationName: 'proxy'
      RequestParameters:
        'method.request.header.Cookie': true
        'method.request.header.X-urs-access-token': true
      ResourceId: !Ref EgressApiResourceDynamicUrl
      RestApiId: !Ref EgressApiGateway

  EgressAPIMethodProfile:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 404
          - StatusCode: 401
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      OperationName: 'profile view'
      RequestParameters:
        'method.request.header.Cookie': true
        'method.request.header.X-urs-access-token': true
      ResourceId: !Ref EgressApiResourceProfile
      RestApiId: !Ref EgressApiGateway

  EgressAPIMethodVersion:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      Integration:
        IntegrationHttpMethod: 'POST'
        IntegrationResponses:
          - StatusCode: 200
        Type: 'AWS_PROXY'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EgressLambda.Arn}/invocations"
      MethodResponses: #TODO: this, probably
        - ResponseParameters:
            'method.response.header.Set-Cookie': true
          StatusCode: 200
      OperationName: 'version method'
      RequestParameters:
        'method.request.header.Cookie': true
      ResourceId: !Ref EgressApiResourceVersion
      RestApiId: !Ref EgressApiGateway

  EgressAPIdeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EgressApiGateway
      - EgressAPIrootMethod
    Properties:
      Description: 'just a deployment for egress app'
      RestApiId: !Ref EgressApiGateway

  ApiGatewayCloudWatchLogGroupEgress:
    Type: AWS::Logs::LogGroup
    Condition: ApiGatewayLogToCloudWatchIsSet
    Properties:
      LogGroupName:
        Fn::Join:
          - ""
          - - "API-Gateway-Execution-Logs_"
            - !Ref EgressApiGateway
            - !Sub "/${StageName}"
      RetentionInDays: 30

  EgressStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - EgressApiGateway
      - EgressAPIdeployment
    Properties:
      StageName: !Ref StageName
      RestApiId: !Ref EgressApiGateway
      DeploymentId: !Ref EgressAPIdeployment
      AccessLogSetting:
        !If
          - ApiGatewayLogToCloudWatchIsSet
          -
            DestinationArn:
              Fn::GetAtt:
                - ApiGatewayCloudWatchLogGroupEgress
                - Arn
            Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller",  "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
          -
            !Ref "AWS::NoValue"
      MethodSettings:
        !If
        - ApiGatewayLogToCloudWatchIsSet
        -
          - DataTraceEnabled: True
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: false
        -
          !Ref "AWS::NoValue"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EgressLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EgressApiGateway}/*"

  TriggerInRegionCIDRUpdate:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateDownloadRole
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt UpdatePolicyLambda.Arn

